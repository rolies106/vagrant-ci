- name: sshkeys | set config
  template: >
    src=ssh_config.j2 
    dest=/etc/ssh/ssh_config 
  notify:
    - ssh-restart

# make sure ssh config exists
- name: sshkeys | ensure directory exists
  file: >
    path={{ ansible_env.HOME }}/.ssh
    owner={{ ansible_env.USER }} 
    group={{ ansible_env.USER }} 
    mode=0700
    state=directory

- name: sshkeys | ensure config exists
  template: >
    src=config.j2 
    dest={{ ansible_env.HOME }}/.ssh/config 
    owner={{ ansible_env.USER }}
    group={{ ansible_env.USER }}
    mode=0600
  notify:
    - ssh-restart

## SSH Authorized Keys

#- name: sshkeys | check for files
#  stat: >
#    path={{ item.file }}
#  with_items: server.ssh.authorized_keys
#  register: sshkeys_files
#  when: server.ssh.authorized_keys is defined and item.file is defined

#- debug: >
#    msg="{{ item.0.name }} - {{ item.1.stat.exists }}"
#  with_together: 
#    - server.ssh.authorized_keys
#    - sshkeys_files.results

#key={{ item.file|default(lookup('file', ansible_env.HOME + '/.ssh/id_rsa.pub')) }}
- name: sshkeys | add authorized keys from files
  authorized_key: >
    user={{ item.user|default(ansible_env.USER) }}
    key="{{ lookup('file', item.file) }}"
    state=present
  with_items: server.ssh.authorized_keys
  when: server.ssh.authorized_keys is defined and item.file is defined

- name: sshkeys | add authorized key entries
  authorized_key: >
    user={{ item.user|default(ansible_env.USER) }}
    key="{{ item.key }}"
    state=present
  with_items: server.ssh.authorized_keys
  when: server.ssh.authorized_keys is defined and item.key is defined

## SSH Private Keys

# copy key files into place
- name: sshkeys | add private keys from files
  shell: >
    cp {{ item.file }} {{ ansible_env.HOME }}/.ssh/{{ item.file|basename }}
  with_items: server.ssh.private_keys
  when: server.ssh.private_keys is defined and item.file is defined

# copy key entries into place
- name: sshkeys | add private keys entries
  shell: >
    echo -e "{{ item.entry }}" >> {{ ansible_env.HOME }}/.ssh/{{ item.entry|md5 }} &&
    echo -e "\nhost *\n\tIdentityFile '{{ ansible_env.HOME }}/.ssh/{{ item.entry|md5 }}'" >> {{ ansible_env.HOME }}/.ssh/config
    creates={{ ansible_env.HOME }}/.ssh/{{ item.entry|md5 }}
  with_items: server.ssh.private_keys
  when: server.ssh.private_keys is defined and item.entry is defined and item.entry

## Known Hosts

#- name: Install known_hosts file
#  copy: src=known_hosts dest=/home/${ansible_ssh_user}/.ssh/known_hosts owner=${ansible_ssh_user} group=${ansible_ssh_user}

#- name: sshkeys | add known hosts to known_hosts file
#  lineinfile: dest=/home/${ansible_ssh_user}/.ssh/known_hosts regexp=^${item.host} line="${item.line}"
#  with_items:
#   - { "host": "github.com", "line": "github.com,207.97.227.239 ssh-rsa 123" }

- name: sshkeys | ensure config exists
  template: >
    src=known_hosts.j2 
    dest={{ ansible_env.HOME }}/.ssh/known_hosts 
    owner={{ ansible_env.USER }} 
    group={{ ansible_env.USER }} 
    mode=0600
  notify:
    - ssh-restart

- name: sshkeys | add keyscan
  shell: >
    ssh-keyscan github.com >> /etc/ssh/ssh_known_hosts;
    ssh-keyscan bitbucket.org >> /etc/ssh/ssh_known_hosts

## Copy keys from the filesystem 

- name: sshkeys | copy custom ssh keys
  shell: >
    cp {{ item }} {{ ansible_env.HOME }}/.ssh/{{ item|basename }}
  with_fileglob: /vagrant/data/ssh/*
  when: item|basename not in [ '.gitignore', 'config', 'known_hosts', 'authorized_keys' ]

- name: sshkeys | check if config exists
  stat: > 
    path=/vagrant/data/ssh/config
  register: ssh_config

- name: sshkeys | install config entries
  shell: > 
    cat /vagrant/data/ssh/config >> {{ ansible_env.HOME }}/.ssh/config
  when: ssh_config.stat.exists

- name: sshkeys | check if authorized_keys exists
  stat: > 
    path=/vagrant/data/ssh/authorized_keys
  register: ssh_authorized_keys

- name: sshkeys | install authorized_keys entries
  shell: > 
    cat /vagrant/data/ssh/authorized_keys >> {{ ansible_env.HOME }}/.ssh/authorized_keys
  when: ssh_authorized_keys.stat.exists

## Correct the Permissions

- name: sshkeys | fix folder permissions
  file: >
    path={{ ansible_env.HOME }}/.ssh
    owner={{ ansible_env.USER }} 
    group={{ ansible_env.USER }} 
    mode=0700

- name: sshkeys | fix file permission
  file: >
    path={{ item }}
    owner={{ ansible_env.USER }} 
    group={{ ansible_env.USER }} 
    mode=0600
  with_fileglob: ansible_env.HOME + '/.ssh/*'
  when: item|basename not in [ '.gitignore' ]

